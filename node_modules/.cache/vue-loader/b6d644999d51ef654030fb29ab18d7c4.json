{"remainingRequest":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Vue/vue-clone-tandem/src/containers/calendar/calendar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/var/www/html/Vue/vue-clone-tandem/src/containers/calendar/calendar.vue","mtime":1576735048155},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIn5AZnVsbGNhbGVuZGFyL2NvcmUvbWFpbi5jc3MiOwpAaW1wb3J0ICJ+QGZ1bGxjYWxlbmRhci9kYXlncmlkL21haW4uY3NzIjsKQGltcG9ydCAifkBmdWxsY2FsZW5kYXIvdGltZWdyaWQvbWFpbi5jc3MiOwpAaW1wb3J0ICJ+QGZ1bGxjYWxlbmRhci9yZXNvdXJjZS10aW1lbGluZS9tYWluLmNzcyI7Cg=="},{"version":3,"sources":["calendar.vue"],"names":[],"mappingsw7BA;AACA;AACA;AACA","file":"calendar.vue","sourceRoot":"src/containers/calendar","sourcesContent":["<template>\n<div>\n  <FullCalendar\n    defaultView           = \"dayGridMonth\"\n    ref                   = \"fullCalendar\"\n    :eventTextColor       = \"eventColor\"\n    :plugins              = \"calendarPlugins\"\n    :draggable            = \"true\"\n    :droppable            = \"true\"\n    :editable             = \"true\"\n    :config               = \"config\"\n    :displayEventTime     = \"false\"\n    :fixedWeekCount       = \"false\"\n    @dateClick            = \"handleDateClick\"\n    @eventClick           = \"eventClick\"\n    :events               = \"arrayOfProgState\"\n  />\n  <AddProgram \n  v-if                    = \"programm_Add\"\n  v-bind:btn2             = \"'Submit'\"\n  event                   = \"Add Program\"\n  v-bind:currentDate      = \"currentDate | filterCustomDate('-')\"\n  v-bind:shift            = \"shift\"\n  v-bind:openAdd_Program  = \"openAdd_Program\"\n  v-bind:submitAddProgram = \"handleAddProgram\"\n  v-bind:closeAddProgram  = \"closeAddProgram\"\n  v-bind:openAddVehicle   = \"openAddVehicle\"\n  v-bind:oatMeal          = \"oatMeal | formatCustomTime(':')\"\n  v-bind:beef             = \"beef | formatCustomTime(':')\"\n  v-bind:pancake          = \"pancake | formatCustomTime(':')\"\n  v-bind:emerald          = \"emerald | formatCustomTime(':')\"\n  v-bind:calendarEvents   = \"calendarEvents\"\n\n  v-on:handletimechange_  = \"datetimehandle($event)\"\n  />\n\n  <AddProgram \n  v-else\n  v-bind:btn2             = \"'Edit'\"\n  event                   = \"Add Program\"\n  v-bind:currentDate      = \"currentDate | filterCustomDate('-')\"\n  v-bind:shift            = \"shift\"\n  v-bind:openAdd_Program  = \"openAdd_Program\"\n  v-bind:submitAddProgram = \"handleEdit\"\n  v-bind:closeAddProgram  = \"closeAddProgram\"\n  v-bind:openAddVehicle   = \"openAddVehicle\"\n  v-bind:oatMeal          = \"oatMeal | formatCustomTime(':')\"\n  v-bind:beef             = \"beef | formatCustomTime(':')\"\n  v-bind:pancake          = \"pancake | formatCustomTime(':')\"\n  v-bind:emerald          = \"emerald | formatCustomTime(':')\"\n  v-bind:calendarEvents   = \"calendarEvents\"\n  \n  v-on:handletimechange_  = \"datetimehandle($event)\"\n  />\n\n  <!-- v-bind:editHandler      = \"openEdit($event)\" -->\n\n            <!-- openAdd_Program=openAdd_Program\n            \n            pancake_error = {!_this.state.pancake_valid}\n            emerald_error = {!_this.state.emerald_valid}\n\n            editHandler = {(e,date,myPersonList)=>_this.openEdit(e,date,myPersonList)}\n\n            handleSubmit={_this.state.programm_Add ? _this.handleAddProgram : _this.handleEdit}\n\n            btn1=\"Cancel\"\n            btn2={_this.state.programm_Add ? \"Submit\" : \"Edit\"}\n\n            // Component props for Select time\n            handletimechange={(date,id) => _this.handletimechange(date,id)}\n            timeValue={_this.state.timeValue}\n\n            //Component Props for Add Person Dilouge\n            openAddVehicle={_this.openAddVehicle} -->\n\n<!-- <AddProgram \n  v-else\n  event = \"Edit Program\"\n  v-bind:showAddProgram = \"showAddProgram\"\n  v-bind:submitAddProgram=\"submitAddProgram\"\n  v-bind:closeAddProgram=\"closeAddProgram\"\n  v-bind:openAddVehicle=\"openAddVehicle\"\n  \n  /> -->\n\n<AddVehicle \nv-if=\"isVehicleAdd\"\nv-bind:title_error=\"title_Valid\"\nv-bind:endTime_error=\"date_Valid\"\nv-bind:eel_error=\"eel_Valid\"\nv-bind:vehicle_error=\"vehicle_Valid\"\nv-bind:location_error=\"location_valid\"\nv-bind:personList_error=\"personList_valid\"\n\nv-bind:openAdd_VehicleDliog = \"openAdd_VehicleDliog\"\nv-bind:title = \"VehicleTitle\"\nv-bind:handleTitleChange = \"handleTitleChange\"\nv-bind:start_time = \"start | formatCustomTime(':')\"\nv-on:handletimechange_ = \"datetimehandle($event)\"\nv-bind:end_time = \"end | formatCustomTime(':')\"\nv-bind:eelVal = \"eelVal\"\nv-bind:handleEelChange = \"handleEelChange\"\nv-bind:v_no = \"vehicleNo\"\nv-bind:vehicleNoHandler = \"vehicleNoHandler\"\nv-bind:location = \"locationVal\"\nv-bind:handleLocationChange = \"handleLocationChange\"\nv-bind:persons = \"availOptions\"\nv-bind:selectedPersons=\"personsList\"\nv-bind:handleUserChange = \"handleUserChange\"\nv-bind:handleSubmit = \"handleAddEvent\"\nv-bind:handleCloseVehicle = \"handleCloseVehicle\"\nv-bind:addVehicleBtnSubmit=\"'Submit'\"\n/>\n\n<AddVehicle \nv-else\nv-bind:title_error=\"title_Valid\"\nv-bind:endTime_error=\"date_Valid\"\nv-bind:eel_error=\"eel_Valid\"\nv-bind:vehicle_error=\"vehicle_Valid\"\nv-bind:location_error=\"location_valid\"\nv-bind:personList_error=\"personList_valid\"\n\nv-bind:openAdd_VehicleDliog = \"openAdd_VehicleDliog\"\nv-bind:title = \"VehicleTitle\"\nv-bind:handleTitleChange = \"handleTitleChange\"\nv-bind:start_time = \"start | formatCustomTime(':')\"\nv-on:handletimechange_ = \"datetimehandle($event)\"\nv-bind:end_time = \"end | formatCustomTime(':')\"\nv-bind:eelVal = \"eelVal\"\nv-bind:handleEelChange = \"handleEelChange\"\nv-bind:v_no = \"vehicleNo\"\nv-bind:vehicleNoHandler = \"vehicleNoHandler\"\nv-bind:location = \"locationVal\"\nv-bind:handleLocationChange = \"handleLocationChange\"\nv-bind:persons = \"availOptions\"\nv-bind:selectedPersons=\"personsList\"\nv-bind:handleUserChange = \"handleUserChange\"\nv-bind:handleSubmit = \"submitEdit($event)\"\nv-bind:handleCloseVehicle = \"handleCloseVehicle\"\nv-bind:addVehicleBtnSubmit=\"'Edit'\"\n/>\n\n            <!-- date_valid = {this.state.date_valid} -->\n\n            <!-- //For Eel User -->\n            <!-- eelDefaultValue={this.state.defaultEelVal} -->\n            <!-- handleEelChange={this.handleEelChange} -->\n\n            <!-- // Component props For Select Users and Listing them -->\n            <!-- handleUserChange = {this.handleUserChange} -->\n            <!-- defaultValue={this.state.isEdit ? this.state.personsList : []} -->\n  \n</div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport FullCalendar from \"@fullcalendar/vue\";\nimport { Calendar } from \"@fullcalendar/core\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport AddProgram from \"../../components/DilogBox/AddProgram\";\nimport $ from 'jquery';\nimport slide from \"jquery-ui/ui/effects/effect-slide\"\nimport AddVehicle from '../../components/DilogBox/AddVehicle'\nimport {formatCustomDate, dateObjFormatter, formatCustomTime} from '../../helper/helper'\nimport passwordValidator from 'password-validator'\nimport { getListOfProgrammes, getProgrammeById, getUserList, updateProgram, createProgram } from '../../services'\nimport {ToastsContainer, ToastsStore, ToastsContainerPosition} from 'react-toasts';\n\n\nconst schema = new passwordValidator()\nvar arrayOfProg = []\nvar currentMonth = new Date()\nvar valid = false\nlet removedList = []\nvar _this = null\n\nexport default Vue.extend({\n  name: \"calendar\",\n\n  components: {\n    FullCalendar,\n    AddProgram,\n    AddVehicle\n  },\n\n  data: function() {\n    return {\n      calendarPlugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n      calendarEvents: [\n        // initial event data\n        { title: \"Event 1\", start: new Date() },\n        { title: \"Event 2\", start: \"2019-12-05\" },\n        { title: \"Event 3\", start: \"2019-12-06\" },\n        { title: \"Event 4\", start: \"2019-12-07\" },\n        { title: \"Event 5\", start: \"2019-12-10\" },\n        { title: \"Event 6\", start: \"2019-12-14\" },\n        { title: \"Event 7\", start: \"2019-12-15\" }\n      ],\n      config: {\n        defaultView: \"month\",\n        editable: true,\n        eventRender: function(event, element) {\n          console.log(event);\n        }\n      },\n      eventColor: \"#fff\",\n      showAddProgram : false,\n\n    isloading:false,\n    program: [],\n    arrayOfProgState : [],\n    vehicle: [],\n    editableDta:[],\n    currentProgrammeId : 0,\n    openAdd_Program: false,\n    isSubmit: false,\n    isEdit: false,\n    start: new Date(),\n    end: new Date(),\n    title: \"\",\n    editableTitle: \"\",\n    editablestart: \"\",\n    editableend: \"\",\n    id: 0,\n    removedUserListArray : [],\n    currentVehicleId:0,\n    updateVehicleId : [],\n    eventSelectId: 0,\n    isValid: false,\n    title_Valid:true,\n    oatmeal_valid : true,\n    beef_valid : true,\n    pancake_valid : true,\n    emerald_valid: true,\n    vehicle_Valid : false,\n    date_Valid : false,\n    eel_Valid : false,\n    location_valid : false,\n    personList_valid : false,\n    programm_Add : false,\n    event_date: new Date(),\n    dateTimeStart: new Date(),\n    dateTimeEnd: new Date(),\n    theme: \"dark\",\n    VehicleTitle : '',\n    personsList: [],\n    fullList:[],\n    VehiclesList:[],\n    usersList: false,\n    preSelect: [\"User1\", \"User2\"],\n    timeValue: new Date(),\n    openAdd_VehicleDliog: false,\n    vehicleNo: null,\n    shift: true,\n    eelVal: \"\",\n    defaultEelVal:{},\n    eelId:0,\n    locationVal: '',\n    isVehicleAdd:true,\n      oatMeal: new Date,\n      beef: new Date(),\n      pancake: new Date(),\n      emerald: new Date(),\n      currentDate:new Date(),\n    Morning: {\n      shift: 'Morning',\n      shiftTime: new Date(),\n    },\n    Evening: {\n      shift: 'Evening',\n      shiftTime: new Date(),\n    },\n    filteredList:[],\n    availOptions : [],\n    userList: []\n    };\n  },\n\n  mounted() {\n       _this = this;\n\n    document.addEventListener('DOMContentLoaded', function() {\n    let draggableEl = document.getElementById('mydraggable')\n    new Draggable(draggableEl, {\n      itemSelector: \".item-class\",\n      eventData: function (eventEl) {\n        let title = eventEl.getAttribute(\"title\");\n        return {\n          title: title\n        };\n      }\n    });\n      })\n\n     _this.monthChangehandler(0)\n\n    $('.fc-today-button').click(() => {      \n      _this.monthChangehandler(0)\n   })\n\n    $('.fc-prev-button').click(() => {  \n       _this.monthChangehandler(1)     \n   });\n\n    $('.fc-next-button').click(() => {\n      _this.monthChangehandler(2)\n });\n  },\n\n\n  methods: {\n    async monthChangehandler(id){\n    const token = localStorage.getItem('isLoggedin')\n    var updateMonth = id === 1 ? new Date(currentMonth.setMonth(currentMonth.getMonth() - 1)) : \n                      id === 2 ? new Date(currentMonth.setMonth(currentMonth.getMonth() + 1)) :\n                      new Date(currentMonth.setMonth(new Date().getMonth()))\n\n    currentMonth = updateMonth\n\n    var month = currentMonth.getMonth() > 8 ? currentMonth.getMonth()+1 : '0' + parseInt(currentMonth.getMonth()+1)\n \n    var lastDate = new Date(currentMonth.getFullYear(),month,0);\n    var programmeStart = currentMonth.getFullYear().toString()+ \"-\" + month + \"-01\"\n    var programmeEnd = currentMonth.getFullYear().toString()+ \"-\" + month + '-' +lastDate.getDate();\n\n   await getListOfProgrammes(token,programmeStart,programmeEnd).then((response) => {\n       arrayOfProg = response.data.data.map((data) => {\n          var obj = {\n            id: data.programmes.length > 0 ? data.programmes[0].programme_id : 0,\n            title : (data.programmes.length > 0 ? data.programmes[0].vechicleCount : 0) + \" vehicles\",\n            date : data.date\n          }\n           return data.programmes.length > 0 ? obj : false\n      })\n        _this.arrayOfProgState = arrayOfProg\n    })\n  },\n\n  validateProgram : function(){\n    let pancakeValid = false\n    let emeraldValid = false\n    \n    if(_this.pancake >= _this.oatMeal){\n      pancakeValid = true\n    }else{\n      pancakeValid = false\n    }\n\n    if(_this.emerald > _this.oatMeal){\n      emeraldValid = true\n    }else{\n      emeraldValid = false\n    }\n\n      _this.pancake_valid = pancakeValid,\n      _this.emerald_valid = emeraldValid\n\n    let validateObj = pancakeValid && emeraldValid\n    return validateObj\n  },\n\n    handleDateClick: function(arg) {\n      // console.log(\"date click \",_this.openAdd_Program);\n      \n    const temp = _this.arrayOfProgState.filter(data => {\n      return data.date === formatCustomDate(arg.date,'-')\n    })\n\n    const empty = \"\";\n    const defaultDate = arg.date;\n    const emptyList = [];\n    var token = localStorage.getItem('isLoggedin')\n    if(arg.date > new Date()){\n      if(!(temp.length > 0)){\n        {\n          getUserList(token,new Date(arg.date)).then(response => {\n            const users = response.data.data.map((data)=>{\n              var obj = {\n                label: data.user_name,\n                value: data.user_id,\n                id : data.user_id\n              }\n              return obj\n            })\n              _this.userList = users\n              // console.log(_this.userList);\n              \n          })\n            \n          const currentDate = new Date(arg.date)\n        \n        // bind with an arrow function\n    \n          _this.oatmeal_valid    = true,\n          _this.beef_valid       = true,\n          _this.pancake_valid    = true,\n          _this.emerald_valid    = true,\n          _this.openAdd_Program  = !_this.openAdd_Program,\n          _this.VehicleTitle     = empty,\n          _this.isSubmit         = true,\n          _this.shift            = true,\n          _this.start            = defaultDate,\n          _this.end              = defaultDate,\n          _this.currentDate      = currentDate,\n          _this.calendarEvents   = emptyList,\n          _this.programm_Add     = true\n          _this.personsList      = emptyList\n          // personId:0\n      }\n      }else{\n        ToastsStore.error(\"Only one Program can be add at particular date!\")\n      }\n}\nelse{\n  ToastsStore.error(\"Please select future dates only for creating Programme!\")\n}\n},\n\n    eventClick:function(program){\n        \n    const removedUserListArray = []\n    const token = localStorage.getItem('isLoggedin');\n    \n    getProgrammeById(token,parseInt(program.event.id)).then( async function(response){      \n        // console.log(response);\n      const tempProg = []\n      var data = response.data.data[0]\n      var date = new Date(data.date)\n      \n      await getUserList(token,date).then(response => {\n          \n        const users = response.data.data.map((data)=>{\n          var obj = {\n            label: data.user_name,\n            value: data.user_id,\n            id : data.user_id\n          }          \n          return obj\n        })\n       Vue.set(_this.$data,'userList',users) \n      })\n\n      const events = data.programmes_vehicles.map(vehicle => {\n        const eel = _this.userList.filter(user => {\n          return user.id === data.user_id\n        })\n        \n      var list = vehicle.prog_vehicle_users.map(user => {\n        const obj = {\n          label: user.user.display_name,\n          value: user.user_id,\n          id : user.user_id\n        }\n        return obj\n      })\n\n    const vehicles = data.programmes_vehicles.map(v_data => {      \n\n      const assingnedPerson = v_data.prog_vehicle_users.map((user) => {\n        const temp = {\n          label: user.user.display_name,\n          value: user.user.display_name,\n          id : user.user_id\n        }\n\n        return temp\n  })\n\n  const emergencyUser = {\n    label:  v_data.support_user.display_name, value:  v_data.support_user_id, id:  v_data.support_user_id\n  }\n  // console.log(emergencyUser);\n  \n  // const emergencyUser = _this.state.userList.filter(userName => {\n    \n  //   return userName.id === v_data.support_user_id\n  // })\n  \n      const obj = {\n        date:_this.currentDate,\n        VehicleTitle: v_data.title,\n        start: dateObjFormatter(date,v_data.v_s_t),\n        end: dateObjFormatter(date,v_data.v_e_t),\n        id: v_data.vehicle_id,\n        vehicleNo: v_data.vehicle_no,\n        eelVal : emergencyUser.label,\n        personsList:[...assingnedPerson],\n        eelId : v_data.support_user_id,\n        locationVal: v_data.additional_info,\n\n      }\n      return obj\n    })\n    \n    tempProg.push({\n      title: data.programmes_vehicles.length +' vehicles',\n      programme_id : data.id,\n      date:date,\n      emerald : data.oct_evening !== \"\" ? dateObjFormatter(date,data.oct_evening) : dateObjFormatter(date,data.oct_morning),\n      beef : data.vmt_evening !== \"\" ? dateObjFormatter(date,data.vmt_evening) : dateObjFormatter(date,data.vmt_morning),\n      pancake : dateObjFormatter(date,data.ws_o_time),\n       oatMeal : data.oot_evening !== \"\" ? dateObjFormatter(date,data.oot_evening) : dateObjFormatter(date,data.oot_morning),\n      VehiclesList : [...vehicles]\n    })\n\n       const obj = {\n        date:new Date(data.date),\n        VehicleTitle: vehicle.title,\n        start: dateObjFormatter(new Date(),vehicle.v_s_t),\n        end: dateObjFormatter(new Date(),vehicle.v_e_t),\n        id: vehicle.vehicle_id,\n        vehicleNo: vehicle.vehicle_no,\n        personsList: list,\n        eelId : vehicle.support_user_id,\n        locationVal: vehicle.additional_info,\n        eelVal : vehicle.support_user.display_name,\n        currentProgrammeId : program.event.id,\n        openAdd_Program : false\n      }\n      return obj \n      })\n\n        _this.oatmeal_valid = true,\n        _this.beef_valid = true,\n        _this.pancake_valid = true,\n        _this.emerald_valid = true,\n        _this.program = tempProg,\n        _this.openAdd_Program= !_this.openAdd_Program,\n        _this.isEdit= true,\n        _this.isSubmit= false,\n        _this.calendarEvents = [...events], \n        _this.removedUserListArray = removedUserListArray,\n        _this.beef    = data.vmt_evening !== \"\" ? dateObjFormatter(date,data.vmt_evening) : dateObjFormatter(date,data.vmt_morning),\n        _this.emerald = data.oct_evening !== \"\" ? dateObjFormatter(date,data.oct_evening) : dateObjFormatter(date,data.oct_morning),\n        _this.oatMeal = data.oot_evening !== \"\" ? dateObjFormatter(date,data.oot_evening) : dateObjFormatter(date,data.oot_morning),\n        _this.pancake = dateObjFormatter(date,data.ws_o_time),\n        _this.programm_Add=false,\n        _this.event_date = date,\n        _this.shift = data.oct_evening === \"\" ? true : false,\n        _this.currentDate = new Date(data.date)\n\n        console.log(_this.beef);\n        \n     \n    })\n     // console.log(typeof(_this.state.personId));\n    },\n\n    handleEdit : function() {    \n   if(_this.event_date > new Date()){\n\n    const token = localStorage.getItem('isLoggedin')\n    \n    const cloneProgram = [..._this.program]\n    const events = [..._this.calendarEvents];\n\n    const updatedProg = cloneProgram.map(info =>{\n\n      const obj ={\n        title: _this.calendarEvents.length +' vehicles' ,\n        programme_id : info.programme_id,\n        date:_this.currentDate,\n        emerald : _this.emerald,\n        beef : _this.beef,\n        pancake : _this.pancake,\n        oatMeal : _this.oatMeal,\n        VehiclesList : [...events]\n      }\n      return obj\n    })    \n    events.map(event => {\n      return event[_this.eventSelectId];\n    });\n\n    updateProgram(token,updatedProg,_this.shift,_this.calendarEvents,_this.updateVehicleId,_this.removedUserListArray)\n    .then(()=>{\n      window.location.reload(false);\n    })\n    // events[_this.state.eventSelectId] = newEvent;\n\n      _this.VehiclesList = events,\n      _this.beef = _this.beef,\n      _this.date = _this.currentDate,\n      _this.emerald = _this.emerald,\n      _this.oatMeal = _this.oatMeal,\n      _this.pancake = _this.pancake,\n      _this.title= _this.calendarEvents.length+'Programs' ,\n      _this.openAdd_Program = false,\n      _this.isloading = true\n      _this.isSubmit = false,\n      _this.isEdit = false    \n   }else{\n     ToastsStore.error('Future events can only be edited!')\n   }\n  },\n\n  handleTitleChange:function(event){\n    const tempVal = event.target.value;\n    //  console.log(tempVal);\n    if (_this.isSubmit) {\n        _this.title_Valid = true,\n        _this.VehicleTitle = tempVal\n    } else {\n        _this.title_Valid = true,\n        _this.VehicleTitle = tempVal\n    }\n  },\n\n  handleEelChange : function(e){\n    // console.log(e);\n      _this.eelVal= e,\n      _this.eelId = e.id,\n      _this.eel_Valid = true\n  },\n\n    closeAddProgram:function(){\n        _this.openAdd_Program = false\n    },\n\n    handleAddProgram: function(){\n      \n    const valid_prog = this.validateProgram()\n    // console.log(temp);\n\nif(_this.calendarEvents.length > 0 && valid_prog){\n  if(_this.pancake_valid && _this.oatmeal_valid && _this.beef_valid && _this.emerald_valid){\n      const program = []\n\n      const events = [..._this.calendarEvents];\n      // const id = new Date().getTime();\n      program.push({\n        title: _this.calendarEvents.length+' Vehicles' ,\n        date:formatCustomDate(_this.currentDate,'-'),\n        oatMeal : formatCustomTime(_this.oatMeal,':'),\n        beef : formatCustomTime(_this.beef,':'),\n        pancake : formatCustomTime(_this.pancake,':'),\n        emerald : formatCustomTime(_this.emerald,':'),\n        VehiclesList : [...events]\n      });\n  \n      arrayOfProg = [...program,...arrayOfProg]\n      \n        _this.program               = program,\n        _this.arrayOfProgState      = arrayOfProg,\n        _this.openAdd_Program       = false,\n        _this.isSubmit              = false,\n        _this.isEdit                = false,\n        _this.programm_Add          =false\n      \n      const token = localStorage.getItem('isLoggedin')\n      createProgram(token,program,_this.shift,_this.calendarEvents,_this.personsList)\n      .then(response => {\n        window.location.reload(false);\n      })\n\n        _this.personsList = _this.personsList\n  \n    }\n}else{\n  // ToastsStore.error(\"please add atleast one vehicle to add program! \") ;\n}\n },\n    openAddVehicle:function(){   \n      \n      const list = _this.userList.filter((data) => {\n      return _this.fullList.findIndex(user => data.id === user.id) < 0\n     })      \n\n      _this.VehicleTitle     = \"\",\n      _this.start            = new Date(),\n      _this.end              = new Date(),\n      _this.id               = 0,\n      _this.vehicleNo        = \"\",\n      _this.availOptions     = list,\n      _this.eelVal           = {},\n      _this.personsList      = [],\n      _this.eelId            = 0,\n      _this.locationVal      = \"\",\n      _this.isVehicleAdd     = true,\n      _this.date_Valid       = true,\n      _this.title_Valid      = true,\n      _this.vehicle_Valid    = true,\n      _this.eel_Valid        = true,\n      _this.location_valid   = true,\n      _this.personList_valid = true\n\n      _this.valid = false\n      _this.openAdd_VehicleDliog = true  \n\n      // console.log(\"open add vehicle\",_this.availOptions);\n          \n    },  \nhandleCloseVehicle:function(){  \n      _this.openAdd_VehicleDliog = false\n    //   console.log(\"closeAddVehicle hit before \",_this.openAdd_VehicleDliog)  ;\n    //  _this.$set(_this.$data,'openAdd_VehicleDliog',false)  \n      // console.log(\"handleCloseVehicle hit after\",_this.openAdd_VehicleDliog);  \n    },  \n\n    validateVehicle:function(){\n\nlet titleValid = false\nlet dateValid = false\nlet eelValid = false\nlet vehicleValid = false\nlet locationValid = false\nlet personValid = false\n  if(_this.VehicleTitle){\n    titleValid = true\n}else{\n  titleValid =false\n}\n\nif(new Date(_this.end) > new Date(_this.start)){\n    dateValid = true\n}else{\n  dateValid = false\n}\n\nif(_this.eelVal){\n  eelValid = true\n}else{\n  eelValid = false\n}\n\nif(_this.vehicleNo){\n  vehicleValid = true\n}else{\n  vehicleValid = false\n}\n\nif(_this.locationVal.length>0){\n  locationValid = true\n}else{\n  locationValid = false\n}\n\nif(_this.personsList.length>0){\n  personValid = true\n}else{\n  personValid = false\n}\n\n  _this.title_Valid      = titleValid,\n  _this.date_Valid       = dateValid,\n  _this.eel_Valid        = eelValid,\n  _this.vehicle_Valid    = vehicleValid,\n  _this.location_valid   = locationValid,\n  _this.personList_valid = personValid\n\n\nlet validateObj =  titleValid && dateValid && eelValid && vehicleValid && locationValid && personValid\n\nreturn validateObj\n\n    },\n\n    handleAddEvent:function(){    \n    var temp = _this.validateVehicle()    \n    \nconsole.log(\"titleValid\",_this.title_Valid);\nconsole.log(\"dateValid\",_this.date_Valid);\nconsole.log(\"eelValid\",_this.eel_Valid);\nconsole.log(\"vehicleValid\",_this.vehicle_Valid);\nconsole.log(\"locationValid\",_this.location_valid);\nconsole.log(\"personValid\",_this.personList_valid);\n\n     valid = temp && _this.title_Valid && _this.date_Valid && _this.eel_Valid && _this.vehicle_Valid && _this.location_valid && _this.personList_valid\n    // var valid = true  \n    if (valid) {  \n      const events = [..._this.calendarEvents];  \n        \n      const templist = [..._this.fullList, ..._this.personsList]  \n  \n      events.push({  \n        date:_this.currentDate,  \n        VehicleTitle: _this.VehicleTitle,  \n        start: _this.start,\n        end: _this.end,\n        id: _this.id,\n        vehicleNo: _this.vehicleNo,\n        personsList: _this.personsList,\n        eelId : _this.eelId,\n        locationVal: _this.locationVal,\n        eelVal: _this.eelVal.label\n      });\n       \n        _this.calendarEvents      = events,\n        _this.isSubmit            = true,\n        _this.isEdit              = false,\n        _this.openAdd_VehicleDliog= false,\n        _this.id                  = _this.id + 1,\n        _this.eelVal              = _this.eelVal,\n        _this.fullList            = templist,\n        _this.personsList         = _this.personsList,\n        _this.title_Valid         = false,\n        _this.vehicle_Valid       = false,\n        _this.date_Valid          = false,\n        _this.eel_Valid           = false,\n        _this.location_valid      = false,\n        _this.personList_valid    = false\n\n      console.log(_this.calendarEvents);\n    } else{\n      // var inp = !this.state.date_Valid ? \"Time should be different & greater than start time\" : null\n    }\n    },\n\n  openEdit : function(data){\n    // console.log(date); \n    \n    console.log(data);\n    \n    const v_id = [..._this.updateVehicleId]\n\n  const vehicleId = _this.calendarEvents.filter(vehicle => {\n            return vehicle.vehicleNo === data.v_no\n  })\n      v_id.push(vehicleId[0].id)\n\n      // let editedVehicleList = v_id.filter((v,i) => v_id.indexOf(v) === i)\n      // console.log(x);\n      \n    const list = data.persons.split(\",\")    \n      const assingnedPerson = _this.userList.filter((data) => {\n        return list.findIndex(user => data.value.toString() === user) !== -1\n  })    \n  // console.log(assingnedPerson);\n\n  let eel = _this.userList.filter((user) => {\n    return user.label === data.eel\n  })\n  // console.log(eel);\n\n  const Avail_Opt = _this.userList.filter((data) => {\n    return _this.fullList.findIndex(user => data.id === user.id) < 0\n   }) \n \n      _this.defaultEelVal        = eel.label,\n      _this.eelVal               = eel[0],\n      _this.eelId                = eel.id,\n      _this.start                = dateObjFormatter(_this.currentDate,data.v_move_start),\n      _this.end                  = dateObjFormatter(_this.currentDate,data.v_move_end),\n      _this.locationVal          = data.location,\n      _this.personsList          = assingnedPerson,\n      _this.VehicleTitle         = data.title,\n      _this.vehicleNo            = data.v_no,\n      _this.isVehicleAdd         = false,\n      _this.date_Valid           = true,\n      _this.title_Valid          = true,\n      _this.eel_Valid            = true,\n      _this.vehicle_Valid        = true,\n      _this.location_valid       = true,\n      _this.personList_valid     = true,\n      _this.updateVehicleId      = v_id,\n      _this.currentVehicleId     = vehicleId[0].id\n    \n      _this.openAdd_VehicleDliog = true,\n      _this.availOptions         =  Avail_Opt\n          // eelVal: data.eel,\n    },\n\n      datetimehandle : function(data){\n        // console.log(data);\n        if(data.id === 1){\n          console.log(\"oatmeal\");\n          _this.oatMeal = new Date(data.time)\n          _this.oatmeal_valid = true        }\n        if(data.id === 2 ){\n          console.log(\"pancake \");\n          if(new Date(data.time) >= new Date(_this.oatMeal)){\n          _this.pancake = new Date(data.time)\n          _this.pancake_valid = true        }\n        }if(data.id === 3){\n          console.log(\"beef \");\n          _this.beef = new Date(data.time)\n          _this.beef_valid = true        }\n        if(data.id == 4){\n          console.log(\"emerald \");\n          if(new Date(data.time) > new Date(_this.oatMeal)){\n          _this.emerald = new Date(data.time)\n          _this.emerald_valid = true        \n          }\n        }\n        if(data.id == 5){          \n          if(new Date(data.time) < new Date(_this.end) && new Date(data.time) !== new Date(_this.end)){\n          console.log(\"start time \");\n          _this.start = new Date(data.time)\n          _this.date_Valid = true\n        }\n        }\n        if(data.id == 6){\n          if(new Date(data.time) > new Date(_this.start) && new Date(data.time) !== new Date(_this.start)){\n          _this.end = new Date(data.time)\n          _this.date_Valid = true\n        }\n        }\n      },\n\n      vehicleNoHandler: function(data){\n        const tempNo = data.target.value \n          schema\n        .has().not().symbols()\n        .has().not().spaces()\n\n          if (schema.validate(tempNo)) {\n              _this.vehicleNo     = tempNo,\n              _this.vehicle_Valid = true\n          } else {\n            ToastsStore.error(\"enter valid vehicle number\")\n              _this.vehicle_Valid = false\n            }\n      },\n\n   handleLocationChange:function(e){\n\n    // console.log(e.target.value);\n    const tempVal = e.target.value\n\n      _this.locationVal= tempVal,\n      _this.location_valid = true\n \n      },\n\n   handleUserChange : function(data){\nconsole.log(\"handle user change \",data);\n\n    let difference = _this.personsList.filter(x => data !== null ? !data.includes(x) : _this.personsList)  // calculates diff\n\n    removedList = [...removedList,...difference]\n\n    removedList = removedList.filter((v,i) => removedList.indexOf(v) === i)\n    // console.log(removedList);\n    \n    if (data && data.length > 0){\n        _this.personList_valid = true,\n       // value:temp\n        _this.personsList = [...data]\n    } else {\n        _this.personsList = []\n    }\n  }\n  }\n});\n</script>\n\n<style lang='scss'>\n@import \"~@fullcalendar/core/main.css\";\n@import \"~@fullcalendar/daygrid/main.css\";\n@import \"~@fullcalendar/timegrid/main.css\";\n@import \"~@fullcalendar/resource-timeline/main.css\";\n</style>"]}]}