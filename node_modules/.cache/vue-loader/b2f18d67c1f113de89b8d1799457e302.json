{"remainingRequest":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Vue/vue-clone-tandem/src/containers/calendar/calendar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/var/www/html/Vue/vue-clone-tandem/src/containers/calendar/calendar.vue","mtime":1575957443897},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAifkBmdWxsY2FsZW5kYXIvY29yZS9tYWluLmNzcyI7CkBpbXBvcnQgIn5AZnVsbGNhbGVuZGFyL2RheWdyaWQvbWFpbi5jc3MiOwpAaW1wb3J0ICJ+QGZ1bGxjYWxlbmRhci90aW1lZ3JpZC9tYWluLmNzcyI7CkBpbXBvcnQgIn5AZnVsbGNhbGVuZGFyL3Jlc291cmNlLXRpbWVsaW5lL21haW4uY3NzIjsK"},{"version":3,"sources":["calendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8TA;AACA;AACA;AACA","file":"calendar.vue","sourceRoot":"src/containers/calendar","sourcesContent":["<template>\n<div>\n  <FullCalendar\n    defaultView=\"dayGridMonth\"\n    ref=\"fullCalendar\"\n    :eventTextColor=\"eventColor\"\n    :plugins=\"calendarPlugins\"\n    :draggable=\"true\"\n    :droppable=\"true\"\n    :editable=\"true\"\n    :config=\"config\"\n    :displayEventTime=\"false\"\n    :fixedWeekCount=\"false\"\n    @dateClick=\"handleDateClick\"\n    @eventClick=\"handleEventclick\"\n    :events=\"calendarEvents\"\n  />\n  <AddProgram \n  v-if=\"programm_Add\"\n  event = \"Add Program\"\n  v-bind:currentDate =\"formatCustomDate(currentDate,'-')\"\n  v-bind:shift=\"shift\"\n  v-bind:showAddProgram = \"showAddProgram\"\n  v-bind:submitAddProgram=\"submitAddProgram\"\n  v-bind:closeAddProgram=\"closeAddProgram\"\n  v-bind:openAddVehicle=\"openAddVehicle\"\n  \n  />\n\n\n            <!-- openAdd_Program=openAdd_Program\n            shiftToggle={this.shiftToggle}\n\n            shiftLabel={this.state.shift ? this.state.Morning.shift : this.state.Evening.shift}\n\n            shiftTime={this.state.shift ? this.state.Morning.shiftTime : this.state.Evening.shiftTime}\n\n            oatmeal={this.state.oatMeal}\n            beef={this.state.beef}\n            emerald={this.state.emerald}\n            pancake={this.state.pancake}\n\n            pancake_error = {!this.state.pancake_valid}\n            emerald_error = {!this.state.emerald_valid}\n\n            currentDate = {formatCustomDate(this.state.currentDate,\"-\")}\n\n            editHandler = {(e,date,myPersonList)=>this.openEdit(e,date,myPersonList)}\n\n            handleClose={this.handleClose}\n\n            handleSubmit={this.state.programm_Add ? this.handleAddProgram : this.handleEdit}\n\n            btn1=\"Cancel\"\n            btn2={this.state.programm_Add ? \"Submit\" : \"Edit\"}\n\n            // Component props for Select time\n            handletimechange={(date,id) => this.handletimechange(date,id)}\n            timeValue={this.state.timeValue}\n\n            //Component Props for Add Person Dilouge\n            openAddVehicle={this.openAddVehicle} -->\n\n<!-- <AddProgram \n  v-else\n  event = \"Edit Program\"\n  v-bind:showAddProgram = \"showAddProgram\"\n  v-bind:submitAddProgram=\"submitAddProgram\"\n  v-bind:closeAddProgram=\"closeAddProgram\"\n  v-bind:openAddVehicle=\"openAddVehicle\"\n  \n  /> -->\n\n<AddVehicle \n\nv-bind:showAddVehicle = \"showAddVehicle\"\nv-bind:closeAddVehicle = \"closeAddVehicle\"\nv-bind:submitAddVehicle = \"submitAddVehicle\"\n/>\n  \n</div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport FullCalendar from \"@fullcalendar/vue\";\nimport { Calendar } from \"@fullcalendar/core\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport AddProgram from \"../../components/DilogBox/AddProgram\";\nimport $ from 'jquery';\nimport slide from \"jquery-ui/ui/effects/effect-slide\"\nimport AddVehicle from '../../components/DilogBox/AddVehicle'\nimport {formatCustomDate} from '../../helper/helper'\nimport passwordValidator from 'password-validator'\nimport { getListOfProgrammes } from '../../services'\n\n\nconst schema = new passwordValidator()\nvar arrayOfProg = []\nvar currentMonth = new Date()\nvar valid = false\nlet removedList = []\n\nexport default Vue.extend({\n  name: \"calendar\",\n\n  components: {\n    FullCalendar,\n    AddProgram,\n    AddVehicle\n  },\n\n  data: function() {\n    return {\n      calendarPlugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n      calendarEvents: [\n        // initial event data\n        { title: \"Event 1\", start: new Date() },\n        { title: \"Event 2\", start: \"2019-12-05\" },\n        { title: \"Event 3\", start: \"2019-12-06\" },\n        { title: \"Event 4\", start: \"2019-12-07\" },\n        { title: \"Event 5\", start: \"2019-12-10\" },\n        { title: \"Event 6\", start: \"2019-12-14\" },\n        { title: \"Event 7\", start: \"2019-12-15\" }\n      ],\n      config: {\n        defaultView: \"month\",\n        editable: true,\n        eventRender: function(event, element) {\n          console.log(event);\n        }\n      },\n      eventColor: \"#fff\",\n      showAddProgram : false,\n      showAddVehicle : false,\n\n    isloading:false,\n    program: [],\n    arrayOfProgState : [],\n    vehicle: [],\n    editableDta:[],\n    currentProgrammeId : 0,\n    openAdd_Program: false,\n    isSubmit: false,\n    isEdit: false,\n    start: new Date(),\n    end: new Date(),\n    title: \"\",\n    editableTitle: \"\",\n    editablestart: \"\",\n    editableend: \"\",\n    id: 0,\n    removedUserListArray : [],\n    currentVehicleId:0,\n    updateVehicleId : [],\n    eventSelectId: 0,\n    isValid: false,\n    title_Valid:true,\n    oatmeal_valid : true,\n    beef_valid : true,\n    pancake_valid : true,\n    emerald_valid: true,\n    vehicle_Valid : false,\n    date_Valid : false,\n    eel_Valid : false,\n    location_valid : false,\n    personList_valid : false,\n    programm_Add : false,\n    event_date: new Date(),\n    dateTimeStart: new Date(),\n    dateTimeEnd: new Date(),\n    theme: \"dark\",\n    VehicleTitle : '',\n    personsList: [],\n    fullList:[],\n    VehiclesList:[],\n    usersList: false,\n    preSelect: [\"User1\", \"User2\"],\n    timeValue: new Date(),\n    openAdd_VehicleDliog: false,\n    vehicleNo: null,\n    shift: true,\n    eelVal: {},\n    defaultEelVal:{},\n    eelId:0,\n    locationVal: '',\n    isVehicleAdd:true,\n    oatMeal: new Date(),\n      beef: new Date(),\n      pancake: new Date(),\n      emerald: new Date(),\n      currentDate:new Date(),\n    Morning: {\n      shift: 'Morning',\n      shiftTime: new Date(),\n    },\n    Evening: {\n      shift: 'Evening',\n      shiftTime: new Date(),\n    },\n    filteredList:[],\n    availOptions : [],\n    userList: []\n    };\n  },\n\n  mounted() {\n    document.addEventListener('DOMContentLoaded', function() {\n    let draggableEl = document.getElementById('mydraggable')\n    new Draggable(draggableEl, {\n      itemSelector: \".item-class\",\n      eventData: function (eventEl) {\n        let title = eventEl.getAttribute(\"title\");\n        return {\n          title: title\n        };\n      }\n    });\n      })\n\n     this.monthChangehandler(0)\n      $('.fc-today-button').click(function(){      \n      this.monthChangehandler(0)\n    // console.log(\"today hit\");\n    \n   })\n\n  },\n\n  methods: {\n\n    async monthChangehandler(id){\n    const token = localStorage.getItem('isLoggedin')\n    var updateMonth = id === 1 ? new Date(currentMonth.setMonth(currentMonth.getMonth() - 1)) : \n                      id === 2 ? new Date(currentMonth.setMonth(currentMonth.getMonth() + 1)) :\n                      new Date(currentMonth.setMonth(new Date().getMonth()))\n\n    currentMonth = updateMonth\n\n    var month = currentMonth.getMonth() > 8 ? currentMonth.getMonth()+1 : '0' + currentMonth.getMonth()+1\n \n    var lastDate = new Date(currentMonth.getFullYear(),parseInt(month),0);\n    var programmeStart = currentMonth.getFullYear().toString()+ \"-\" + month + \"-01\"\n    var programmeEnd = currentMonth.getFullYear().toString()+ \"-\" + month + '-' +lastDate.getDate();\n\n   await getListOfProgrammes(token,programmeStart,programmeEnd).then((response) => {\n       arrayOfProg = response.data.data.map((data) => {\n          var obj = {\n            id: data.programmes.length > 0 ? data.programmes[0].programme_id : 0,\n            title : (data.programmes.length > 0 ? data.programmes[0].vechicleCount : 0) + \" vehicles\",\n            date : data.date\n          }\n           return data.programmes.length > 0 ? obj : false\n      })\n        this.arrayOfProgState = arrayOfProg\n    })\n  },\n\n  validateProgram : function(){\n    let pancakeValid = false\n    let emeraldValid = false\n    \n    if(this.state.pancake >= this.state.oatMeal){\n      pancakeValid = true\n    }else{\n      pancakeValid = false\n    }\n\n    if(this.state.emerald > this.state.oatMeal){\n      emeraldValid = true\n    }else{\n      emeraldValid = false\n    }\n\n    this.setState({\n      ...this.state,\n      pancake_valid : pancakeValid,\n      emerald_valid : emeraldValid\n    })\n\n    let validateObj = pancakeValid && emeraldValid\n    return validateObj\n  },\n\n    handleDateClick: function(event) {\n      console.log(\"handleDateClick fired\", event);\n      this.showAddProgram = true\n    },\n\n    handleEventclick:function(eventData){\n        console.log(\"eventclick fired\", eventData)\n    },\n\n    closeAddProgram:function(){\n        this.showAddProgram = false\n    },\n\n    submitAddProgram: function(){\n        console.log(\"handle submit\");\n        this.showAddProgram = !this.showAddProgram\n    },\n    openAddVehicle:function(){        \n        this.showAddVehicle = true\n        console.log(\"openaddvehicle hit \",this.showAddVehicle);\n    },\n    closeAddVehicle:function(){\n        this.showAddVehicle = false\n    },\n    submitAddVehicle:function(){\n        this.showAddVehicle = false\n    }\n  }\n});\n</script>\n\n<style lang='scss'>\n@import \"~@fullcalendar/core/main.css\";\n@import \"~@fullcalendar/daygrid/main.css\";\n@import \"~@fullcalendar/timegrid/main.css\";\n@import \"~@fullcalendar/resource-timeline/main.css\";\n</style>"]}]}