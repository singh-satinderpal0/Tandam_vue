{"remainingRequest":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/Vue/vue-clone-tandem/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Vue/vue-clone-tandem/src/components/DilogBox/AddVehicle.vue?vue&type=template&id=f2c680a4&","dependencies":[{"path":"/var/www/html/Vue/vue-clone-tandem/src/components/DilogBox/AddVehicle.vue","mtime":1576580030293},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Vue/vue-clone-tandem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}